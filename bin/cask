#!/usr/bin/env python
# -*- coding: utf-8; -*-

# Copyright (C) 2012, 2013 Johan Andersson
# Copyright (C) 2013 Sebastian Wiesner

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

"""Cask start script
=================

This script is the command line frontend to Cask.  Basically it just delegates
all commands to the Emacs Lisp implementation, with the exception of `exec`,
due to the lack of a corresponding function in Emacs.
"""


from __future__ import print_function, unicode_literals


import sys
import os
import locale
import re
import subprocess


# The Cask executable
CASK = os.path.realpath(os.path.abspath(sys.argv[0]))
CASK_BIN_DIRECTORY = os.path.dirname(CASK)
CASK_DIRECTORY = os.path.dirname(CASK_BIN_DIRECTORY)

# Get the byte-string process environment
ENVB = getattr(os, 'environb', os.environ)

# Regular expression to extract the version number from emacs --version
VERSION_RE = re.compile(r'^GNU Emacs (?P<version>\d+(?:\.\d+)*)$', re.MULTILINE)

MIN_EMACS_VERSION = (23,)


class EmacsVersionError(Exception):
    def __init__(self, version):
        Exception.__init__(self)
        self.version = version


def is_executable_file(path):
    return os.path.isfile(path) and os.access(path, os.X_OK)


def get_cask_path(path):
    process = subprocess.Popen([CASK, path], stdout=subprocess.PIPE)
    stdout, _ = process.communicate()
    return stdout.rstrip()


def get_emacs_version(emacs):
    process = subprocess.Popen(
        [emacs, '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, _ = process.communicate()
    version = VERSION_RE.search(stdout.decode(locale.getpreferredencoding()))
    if not version:
        raise ValueError('Could not determine the Emacs version')
    else:
        return tuple(map(int, version.group('version').split('.')))


def find_best_emacs():
    if (sys.platform == 'darwin' and
        get_emacs_version('emacs') < MIN_EMACS_VERSION):
        # On OS X, we have a chance to look at other places, if the default
        # Emacs is not recent enough.  We look for an Emacs.app bundle at
        # various places, and eventually try a brew'd Emacs at
        # /usr/local/bin/emacs.  If all this fails, we return the default Emacs
        # nonetheless, and let Cask fail later on.
        candidates = [
            os.path.expanduser('~/Applications/Emacs.app/Contents/MacOS/Emacs'),
            '/Applications/Emacs.app/Contents/MacOS/Emacs',
            '/usr/local/bin/emacs',
        ]
        for candidate in candidates:
            if (is_executable_file(candidate) and
                get_emacs_version(candidate) >= MIN_EMACS_VERSION):
                return candidate
        else:
            return 'emacs'
    else:
        return 'emacs'

def get_cask_emacs():
    emacs = ENVB.get(b'EMACS')
    if b'INSIDE_EMACS' in ENVB
        # If $INSIDE_EMACS is set, Cask is called from within Emacs, e.g. M-x
        # compile.  In this case, $EMACS may be set as well to a rather
        # meaningless value.  If $INSIDE_EMACS is set, we just ignore the
        # value of $EMACS.
        emacs = None
    emacs = emacs or find_best_emacs()
    version = get_emacs_version(emacs)
    if version < MIN_EMACS_VERSION:
        raise EmacsVersionError(version)
    return emacs


def exec_command(command):
    # Copy the environment and update the paths
    ENVB[b'EMACSLOADPATH'] = get_cask_path('load-path')
    ENVB[b'PATH'] = get_cask_path('path')
    os.execvp(command[0], command)


def exec_cask(args):
    emacs = get_cask_emacs()
    cli = os.path.join(CASK_DIRECTORY, 'cask-cli.el')
    command = [emacs, '-Q', '--script', cli, '--'] + args
    os.execvp(command[0], command)


def exit_error(error):
    executable = os.path.basename(sys.argv[0])
    command = (' ' + sys.argv[1]) if len(sys.argv) > 1 else ''
    print('{0}{1}: error: {2}'.format(executable, command, error),
          file=sys.stderr)
    sys.exit(1)


def main():
    try:
        if len(sys.argv) > 1 and sys.argv[1] == 'exec':
            exec_command(sys.argv[2:])
        else:
            exec_cask(sys.argv[1:])
    except OSError as error:
        exit_error(error)
    except EmacsVersionError as error:
        exit_error('Emacs 23 required, yours is Emacs {0}.'.format(
            '.'.join(map(str, error.version))))


if __name__ == '__main__':
    main()
